## Which hosts will the playbook run against?
$ ansible-playbook <playbook>.yaml --list-hosts

## Which hosts are in the hosts file?
$ ansible all --list-hosts
$ ansible '192.168.2.*' -i <myinventory> --list-hosts                     <-everything that matches the wildcard
$ ansible lab:datacenter1 -i <myinventory> --list-hosts                   <-members of lab OR datacenter1
$ ansible 'lab:&datacenter1' -i <myinventory> --list-hosts                <-members of lab AND datacenter1
$ ansible 'datacenter:!test2.example.com' -i <myinventory> --list-hosts   <-exclude host


## Configuration, Inventory defaults:
$ cat /etc/ansible/hosts
$ grep host_file ansible.cfg
  Priority in which the config files are processed:
   1) ANSIBLE_CONFIG (an environment variable)
   2) ./ansible.cfg (in the current directory)
   3) ~/.ansible.cfg
   4) /etc/ansible/ansible.cfg
  $ ansible --version     <-shows what config file is currently being used

Commonly Modified Settings in 'ansible.cfg':
inventory= Location of Ansible inventory file
remote user= Remote user account used to establish connections to managed hosts
become= Enables/disables privilege escalation for operations on managed hosts (NOT BY DEFAULT!)
become_method= Defines privilege escalation method
become_user= User account for escalating privileges
become_ask_pass= Defines whether privilege escalation prompts for password


! When using the '-i' parameter, if the value is a 'list' (it contains at least one comma) it will be used as the inventory LIST:
  $ ansible -i /etc/ansible/hosts <playbook>.yaml
! While the variable is a string, it will be used as the inventory PATH:
  $ ansible -i localhost, <playbook>.yaml
! It can be either FQDN or IP address
  
  # Inventory file Example
    [webserver]          <-both hosts can be reduced to ws[01:02].lmaly.io using regexp
    ws01.lmaly.io   
    ws02.lmaly.io:1234   <-configured to listen on port 1234 

    [database]
    db01.lmaly.io
    192.168.[1:5].[0:255]  <-includes 192.168.1.0/24 through 192.168.5.0/24

    [nsw_cities:children] <-nested groups use the keyword :children
    webserver
    database
    others

    [others]
    localhost ansible_connection=local                        <-it will use local connection, without SSH
    192.168.3.7 ansible_connection=ssh ansible_user=ftaylor   <-use different settings example

  # Dynamic inventory - AWS
  !Script must support '--list' an '--host' parameters, e.g.:
  $ ./inventiryscript --list
    $ sudo cp ec2.py /etc/ansible/
    $ sudo cp ec2.ini /etc/ansible/
    $ sudo chmod +x /etc/ansible/ec2.py
    $ ansible -i ec2.py all -m ping


## Ansible works only if the passwordless access is configured:
$ ssh-keygen
$ ssh-copy-id lmaly@<HOST>
$ ssh lmaly@<HOST>


## Ansible verbosity:
$ ansible-playbook -v -i <HOST> <playbook>.yaml
$ ansible-playbook -vv -i <HOST> <playbook>.yaml
$ ansible-playbook -vvv -i <HOST> <playbook>.yaml


## Playbook basics:
---                                       <-indicates YAML, optional document marker
- hosts: all                              <-host or host group against we will run the task (example - hosts: webserver)
  remote_user: lmaly                      <-as what user will Ansible log in to the machine(s)
  tasks:                                  <-list of actions
  - name: Whatever you want to name it    <-name of the first task
    yum:                                  
      name: httpd                         
      state: present                      <-same as single line 'yum: name=httpd state=present become=True'
      become: True                        <-task will be executed with sudo
...                                       <-optional document marker indicating end of YAML

Notes:
  !Space characters used for indentation
  !Pipe (|) preservers line returns within string
  !Arrow (>) converts line returns to spaces, removes leading space in lines
  !Indentation rules:
   Elements at same level in hierarchy must have same indentation
   Child elements must be indented further than parents
   No rules about exact number of spaces to use
  !Optional: Insert blank lines for readability
  !Use YAML Lint http://yamllint.com to check the syntax correctness
  !Use 'ansible-playbook --syntax-check <MYAML.YML>'
  !Use 'ansible-playbook -C <MYAML.YML>' for dry run (what changes would occur if playbook is executed?)
  !Use 'ansible-playbook --step <MYAML.YML>' to prompt each task (y=yes/n=no/c=exit and execute remaining without asking)
  !For complex playbooks, use 'include' to include separate files in main playbook (include: tasks/env.yml)

## Variables:
--- # Usually comment field describing what it does
- hosts: all
  remote_user: lmaly
  tasks:
  - name: Set variable 'name'
    set_fact:
      name: Test machine
  - name: Print variable 'name'
    debug:
      msg: '{{ name }}'

a/ In vars block:
 vars:
   set_fact: 'Test machine'

b/ Passed as arguments:
  include_vars: vars/extra_args.yml

  # Other alternative ways:
    (1) pass variable(s) in the CLI:
    $ ansible-playbook -i <HOST>, <playbook>.yaml  -e 'name=test01'

    (2) pass variable(s) to an inventory file:
      a/
      [webserver]   <- all playbooks running on webservers will be able to refer to the domain name variable
      ws01.lmaly.io domainname=example1.lmaly.io
      ws02.lmaly.io domainname=example2.lmaly.io
    
      b/
      [webserver:vars]    <- ! Host variables will override group variables in case tge same variable is used in both
      https_enabled=True

    (3) in variable file(s):
      a/ host_vars:
      $ cat host_vars/ws01.lmaly.io
        domainname=example1.lmaly.io
    
      b/ group_vars:
      $ cat group_vars/webserver
        https_enabled=True
  
  !Variable must start with letter; valid characters are: letters, numbers, underscores
  # Array definition example:
    users:
     bjones:
      first_name: Bob
      last_name: Jones
     acook:
      first_name: Anne
      last_name: Cook
  # Array accessing example:  
    users.bjones.first_name             # Returns 'Bob'
    users['bjones']['first_name']       # Returns 'Bob'  <-preferable method

  # Inventory variables hierarchy/scope
    !Three levels: Global, Play, Host
    !If Ansible finds variables with the same name, it uses chain of preference (highest priority on the top):
 ^   A) Common variable file     - overrides everything, host/group/inventory variable files
 |      01) 'extra' variables via CLI (-e)
 |      02) Task variables (only for task itself)
 |      03) Defined in 'block' statement (- block:)
 |      04) 'role' and 'include' variables
 |      05) Included using 'vars_files' (vars_files: - /vars/env.yml)
 |      06) 'vars_prompt' variables (vars_prompt:)
 |      07) Defined with '-a' or '--args' command line
 |      08) Defined via 'set_facts' (- set_fact: user: joe)
 |      09) Registered variables with 'register' keyword for debugging
 |      10) Host facts discovered by Ansible (ansible_facts)
 |   B) Host variables           - overrides group variable files
 |      11) 'host_vars' in host_vars directory
 |   C) Group variables          - overrides inventory variable files
 |      12) 'group_vars' in group_vars directory
 |   D) Inventory variable files - lowest priority
 |      13) 'host_vars' in the inventory file ([hostgroup:vars])
 |      14) 'group_vars' in the inventory file ([hostgroup:children])
 |      15) Inventory file variables - global
 |      16) Role default variables - Set in roles vars directory

    !Variables passed to the CLI have priority over any other variable.
    !You can override the following parameters from an inventory file:
      ansible_user, ansible_port, ansible_host, ansible_connection, ansible_private_key_file, ansible_shell_type


## Iterates (http://docs.ansible.com/ansible/playbooks_loops.html)
   (1) Standard - 'with_items' example:
   firewall
       firewalld:
         service: '{{ item }}'
         state: enabled
         permanent: True
         immediate: True
       become: True
       with_items:
       - http
       - https

   (2) Nested loops (iterate all elements of a list with all items from other lists) - 'with_nested' example:
   user:
     name: '{{ item }}'
   become: True
   with_items:
   - '{{ users }}'
   file:
     path: '/home/{{ item.0 }}/{{ item.1 }}'
     state: directory
   become: True
   with_nested:
   - '{{ users }}'
   - '{{ folders }}'

   (3) Fileglobs loop (action on every file present in a certain folder) - 'with_fileglobs' example:
   copy:
     src: '{{ item }}'
     dest: '/tmp/iproute2'
     remote_src: True
   become: True
   with_fileglob:
   - '/etc/iproute2/rt_*'

   (4) Integer loop (iterate over the integer numbers) - 'with_sequence' example:
   file:
     dest: '/tmp/dir{{ item }}'
     state: directory
   with_sequence: start=1 end=10
   become: True


## See the metadata obtained during Ansible setup (module setup):
$ ansible all -i <HOST>, -m setup
$ ansible <group> -m setup
$ ansible <group> -m setup --tree facts
# Show the specific metadata:
$ ansible <group> -m setup -a 'filter=*ipv4*'
  # Examples:
  {{ ansible_hostname }}
  {{ ansible_default_ipv4.address }}
  {{ ansible_devices.vda.partitions.vda1.size }}
  {{ ansible_dns.nameservers }}
  {{ ansible_kernel }}
# To disable facts:
  gather_facts: no
# Custom facts are saved under ansible_local:
  $ cat /etc/ansible/facts.d/new.fact    <-ini or json file
  $ ansible demo1.example.com -m setup -a 'filter=ansible_local'
# Accessing facts of another node:
  {{ hostvars['demo2.example.com']['ansible_os_family'] }}

# Run arbitrary command on all hosts as sudo:
$ ansible all -s -a "cat /var/log/messages"
# Run Ad Hoc module with arguments:
$ ansible host pattern -m module -a 'argument1 argument2' [-i inventory]
# Run ad hoc command that generates one line input for each operation:
$ ansible myhosts -m command -a /usr/bin/hostname -o
# Default module (command, NOT SHELL!) is defined in 'ansible.cfg' under 'defaults' section:
$ grep module_name /etc/ansible/ansible.cfg
  !If no modules defined, predefined command module used

## Print all the tasks in short form that playbook would perform:
$ ansible-playbook <playbook>.yaml --list-tasks


## Jinja2 Template(s):
---
- hosts: all
  remote_user: lmaly
  tasks:
  - name: Ensure the website is present and updated
    template:
      src: index.html.j2
      dest: /var/www/html/index.html
      owner: root
      group: root
      mode: 0644
    become: True

  # Variables in J2 template(s):
    '{{ VARIABLE_NAME }}'
    '{{ ARRAY_NAME['KEY'] }}'
    '{{ OBJECT_NAME.PROPERTY_NAME }}'

    # Example of index.html.j2 using variable:
      <html>
       <body>
        <h1>Hello World!</h1>
        <p>This page was created on {{ ansible_date_time.date }}.</p>
       </body>
      </html>

  # Built-in Filtres in J2 template(s):
    '{{ VARIABLE_NAME | capitalize }}'

  # Conditionals:
    a/
    {% if ansible_eth0.active == True %}
       <p>eth0 address {{ ansible_eth0.ipv4.address }}.</p>
    {% endif %}

    b/
    {% if ansible_eth0.active is equalto True %}
       <p>eth0 address {{ ansible_eth0.ipv4.address }}.</p>
    {% endif %}

  # Cycles:
    {% for address in ansible_all_ipv4_addresses %}
       <li>{{ address }}</li>
    {% endfor %}
  
More information:
http://jinja.pocoo.org/docs/dev/templates/#builtin-filters
http://jinja.pocoo.org/docs/dev/templates/#builtin-tests


## Modules
 # Custom modules
   Priority in which the custom module is being processed:
   1, ANSIBLE_LIBRARY environment variable
   2, 'library' in the ansible.cfg
   3, ./library/ relative to location of playbook in use
 # Default modules
   $ cd /usr/lib/python2.7/site-packages/ansible/modules
   $ ansible-doc -l
   $ ansible-doc <MODULE>
   $ ansible-doc -s <MODULE>

## CLI:
(1) Run a command somewhere else using Ansible
$ ansible
Usage: ansible <host-pattern> [options]
Options:
  -a MODULE_ARGS, --args=MODULE_ARGS
                        module arguments
  --ask-vault-pass      ask for vault password
  -B SECONDS, --background=SECONDS
                        run asynchronously, failing after X seconds
                        (default=N/A)
  -C, --check           don't make any changes; instead, try to predict some
                        of the changes that may occur
  -D, --diff            when changing (small) files and templates, show the
                        differences in those files; works great with --check
  -e EXTRA_VARS, --extra-vars=EXTRA_VARS
                        set additional variables as key=value or YAML/JSON
  -f FORKS, --forks=FORKS
                        specify number of parallel processes to use
                        (default=5)
  -h, --help            show this help message and exit
  -i INVENTORY, --inventory-file=INVENTORY
                        specify inventory host path
                        (default=/etc/ansible/hosts) or comma separated host
                        list.
  -l SUBSET, --limit=SUBSET
                        further limit selected hosts to an additional pattern
  --list-hosts          outputs a list of matching hosts; does not execute
                        anything else
  -m MODULE_NAME, --module-name=MODULE_NAME
                        module name to execute (default=command)
  -M MODULE_PATH, --module-path=MODULE_PATH
                        specify path(s) to module library (default=None)
  --new-vault-password-file=NEW_VAULT_PASSWORD_FILE
                        new vault password file for rekey
  -o, --one-line        condense output
  --output=OUTPUT_FILE  output file name for encrypt or decrypt; use - for
                        stdout
  -P POLL_INTERVAL, --poll=POLL_INTERVAL
                        set the poll interval if using -B (default=15)
  --syntax-check        perform a syntax check on the playbook, but do not
                        execute it
  -t TREE, --tree=TREE  log output to this directory
  --vault-password-file=VAULT_PASSWORD_FILE
                        vault password file
  -v, --verbose         verbose mode (-vvv for more, -vvvv to enable
                        connection debugging)
  --version             show program's version number and exit

  Connection Options:
    control as whom and how to connect to hosts

    -k, --ask-pass      ask for connection password
    --private-key=PRIVATE_KEY_FILE, --key-file=PRIVATE_KEY_FILE
                        use this file to authenticate the connection
    -u REMOTE_USER, --user=REMOTE_USER
                        connect as this user (default=None)
    -c CONNECTION, --connection=CONNECTION
                        connection type to use (default=smart)
    -T TIMEOUT, --timeout=TIMEOUT
                        override the connection timeout in seconds
                        (default=10)
    --ssh-common-args=SSH_COMMON_ARGS
                        specify common arguments to pass to sftp/scp/ssh (e.g.
                        ProxyCommand)
    --sftp-extra-args=SFTP_EXTRA_ARGS
                        specify extra arguments to pass to sftp only (e.g. -f,
                        -l)
    --scp-extra-args=SCP_EXTRA_ARGS
                        specify extra arguments to pass to scp only (e.g. -l)
    --ssh-extra-args=SSH_EXTRA_ARGS
                        specify extra arguments to pass to ssh only (e.g. -R)

  Privilege Escalation Options:
    control how and which user you become as on target hosts

    -s, --sudo          run operations with sudo (nopasswd) (deprecated, use
                        become)
    -U SUDO_USER, --sudo-user=SUDO_USER
                        desired sudo user (default=root) (deprecated, use
                        become)
    -S, --su            run operations with su (deprecated, use become)
    -R SU_USER, --su-user=SU_USER
                        run operations with su as this user (default=root)
                        (deprecated, use become)
    -b, --become        run operations with become (does not imply password
                        prompting)
    --become-method=BECOME_METHOD
                        privilege escalation method to use (default=sudo),
                        valid choices: [ sudo | su | pbrun | pfexec | runas |
                        doas | dzdo ]
    --become-user=BECOME_USER
                        run operations as this user (default=root)
    --ask-sudo-pass     ask for sudo password (deprecated, use become)
    --ask-su-pass       ask for su password (deprecated, use become)
    -K, --ask-become-pass
                        ask for privilege escalation password



(2) Run Ansible playbook
$ ansible-playbook
Usage: ansible-playbook playbook.yml
Options:
  --ask-vault-pass      ask for vault password
  -C, --check           don't make any changes; instead, try to predict some
                        of the changes that may occur
  -D, --diff            when changing (small) files and templates, show the
                        differences in those files; works great with --check
  -e EXTRA_VARS, --extra-vars=EXTRA_VARS
                        set additional variables as key=value or YAML/JSON
  --flush-cache         clear the fact cache
  --force-handlers      run handlers even if a task fails
  -f FORKS, --forks=FORKS
                        specify number of parallel processes to use
                        (default=5)
  -h, --help            show this help message and exit
  -i INVENTORY, --inventory-file=INVENTORY
                        specify inventory host path
                        (default=/etc/ansible/hosts) or comma separated host
                        list.
  -l SUBSET, --limit=SUBSET
                        further limit selected hosts to an additional pattern
  --list-hosts          outputs a list of matching hosts; does not execute
                        anything else
  --list-tags           list all available tags
  --list-tasks          list all tasks that would be executed
  -M MODULE_PATH, --module-path=MODULE_PATH
                        specify path(s) to module library (default=None)
  --new-vault-password-file=NEW_VAULT_PASSWORD_FILE
                        new vault password file for rekey
  --output=OUTPUT_FILE  output file name for encrypt or decrypt; use - for
                        stdout
  --skip-tags=SKIP_TAGS
                        only run plays and tasks whose tags do not match these
                        values
  --start-at-task=START_AT_TASK
                        start the playbook at the task matching this name
  --step                one-step-at-a-time: confirm each task before running
  --syntax-check        perform a syntax check on the playbook, but do not
                        execute it
  -t TAGS, --tags=TAGS  only run plays and tasks tagged with these values
  --vault-password-file=VAULT_PASSWORD_FILE
                        vault password file
  -v, --verbose         verbose mode (-vvv for more, -vvvv to enable
                        connection debugging)
  --version             show program's version number and exit

  Connection Options:
    control as whom and how to connect to hosts

    -k, --ask-pass      ask for connection password
    --private-key=PRIVATE_KEY_FILE, --key-file=PRIVATE_KEY_FILE
                        use this file to authenticate the connection
    -u REMOTE_USER, --user=REMOTE_USER
                        connect as this user (default=None)
    -c CONNECTION, --connection=CONNECTION
                        connection type to use (default=smart)
    -T TIMEOUT, --timeout=TIMEOUT
                        override the connection timeout in seconds
                        (default=10)
    --ssh-common-args=SSH_COMMON_ARGS
                        specify common arguments to pass to sftp/scp/ssh (e.g.
                        ProxyCommand)
    --sftp-extra-args=SFTP_EXTRA_ARGS
                        specify extra arguments to pass to sftp only (e.g. -f,
                        -l)
    --scp-extra-args=SCP_EXTRA_ARGS
                        specify extra arguments to pass to scp only (e.g. -l)
    --ssh-extra-args=SSH_EXTRA_ARGS
                        specify extra arguments to pass to ssh only (e.g. -R)

  Privilege Escalation Options:
    control how and which user you become as on target hosts

    -s, --sudo          run operations with sudo (nopasswd) (deprecated, use
                        become)
    -U SUDO_USER, --sudo-user=SUDO_USER
                        desired sudo user (default=root) (deprecated, use
                        become)
    -S, --su            run operations with su (deprecated, use become)
    -R SU_USER, --su-user=SU_USER
                        run operations with su as this user (default=root)
                        (deprecated, use become)
    -b, --become        run operations with become (does not imply password
                        prompting)
    --become-method=BECOME_METHOD
                        privilege escalation method to use (default=sudo),
                        valid choices: [ sudo | su | pbrun | pfexec | runas |
                        doas | dzdo ]
    --become-user=BECOME_USER
                        run operations as this user (default=root)
    --ask-sudo-pass     ask for sudo password (deprecated, use become)
    --ask-su-pass       ask for su password (deprecated, use become)
    -K, --ask-become-pass
                        ask for privilege escalation password



(3) Set up a remote copy of ansible on each managed node (clone Ansible configuration files from Git repository)
$ ansible-pull 
Usage: ansible-pull -U <repository> [options]

Options:
  --accept-host-key     adds the hostkey for the repo url if not already added
  --ask-vault-pass      ask for vault password
  -C CHECKOUT, --checkout=CHECKOUT
                        branch/tag/commit to checkout.  Defaults to behavior
                        of repository module.
  -d DEST, --directory=DEST
                        directory to checkout repository to
  -e EXTRA_VARS, --extra-vars=EXTRA_VARS
                        set additional variables as key=value or YAML/JSON
  -f, --force           run the playbook even if the repository could not be
                        updated
  --full                Do a full clone, instead of a shallow one.
  -h, --help            show this help message and exit
  -i INVENTORY, --inventory-file=INVENTORY
                        specify inventory host path
                        (default=/etc/ansible/hosts) or comma separated host
                        list.
  -l SUBSET, --limit=SUBSET
                        further limit selected hosts to an additional pattern
  --list-hosts          outputs a list of matching hosts; does not execute
                        anything else
  -m MODULE_NAME, --module-name=MODULE_NAME
                        Repository module name, which ansible will use to
                        check out the repo. Default is git.
  -M MODULE_PATH, --module-path=MODULE_PATH
                        specify path(s) to module library (default=None)
  --new-vault-password-file=NEW_VAULT_PASSWORD_FILE
                        new vault password file for rekey
  -o, --only-if-changed
                        only run the playbook if the repository has been
                        updated
  --output=OUTPUT_FILE  output file name for encrypt or decrypt; use - for
                        stdout
  --purge               purge checkout after playbook run
  --skip-tags=SKIP_TAGS
                        only run plays and tasks whose tags do not match these
                        values
  -s SLEEP, --sleep=SLEEP
                        sleep for random interval (between 0 and n number of
                        seconds) before starting. This is a useful way to
                        disperse git requests
  -t TAGS, --tags=TAGS  only run plays and tasks tagged with these values
  -U URL, --url=URL     URL of the playbook repository
  --vault-password-file=VAULT_PASSWORD_FILE
                        vault password file
  -v, --verbose         verbose mode (-vvv for more, -vvvv to enable
                        connection debugging)
  --verify-commit       verify GPG signature of checked out commit, if it
                        fails abort running the playbook. This needs the
                        corresponding VCS module to support such an operation
  --version             show program's version number and exit

  Connection Options:
    control as whom and how to connect to hosts

    -k, --ask-pass      ask for connection password
    --private-key=PRIVATE_KEY_FILE, --key-file=PRIVATE_KEY_FILE
                        use this file to authenticate the connection
    -u REMOTE_USER, --user=REMOTE_USER
                        connect as this user (default=None)
    -c CONNECTION, --connection=CONNECTION
                        connection type to use (default=smart)
    -T TIMEOUT, --timeout=TIMEOUT
                        override the connection timeout in seconds
                        (default=10)
    --ssh-common-args=SSH_COMMON_ARGS
                        specify common arguments to pass to sftp/scp/ssh (e.g.
                        ProxyCommand)
    --sftp-extra-args=SFTP_EXTRA_ARGS
                        specify extra arguments to pass to sftp only (e.g. -f,
                        -l)
    --scp-extra-args=SCP_EXTRA_ARGS
                        specify extra arguments to pass to scp only (e.g. -l)
    --ssh-extra-args=SSH_EXTRA_ARGS
                        specify extra arguments to pass to ssh only (e.g. -R)

  Privilege Escalation Options:
    control how and which user you become as on target hosts

    --ask-sudo-pass     ask for sudo password (deprecated, use become)
    --ask-su-pass       ask for su password (deprecated, use become)
    -K, --ask-become-pass
                        ask for privilege escalation password

(4) Accessing documentation locally
$ ansible-doc
Usage: ansible-doc [options] [module...]

Options:
  -h, --help            show this help message and exit
  -l, --list            List available modules
  -M MODULE_PATH, --module-path=MODULE_PATH
                        specify path(s) to module library (default=None)
  -s, --snippet         Show playbook snippet for specified module(s)
  -v, --verbose         verbose mode (-vvv for more, -vvvv to enable
                        connection debugging)
  --version             show program's version number and exit
